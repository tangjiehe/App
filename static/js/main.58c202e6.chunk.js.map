{"version":3,"sources":["components/SideBar/SideMenu.js","components/SideBar/SideBar.js","container/Home/Home.js","components/Cards/Card.js","components/Cards/CardsList.js","components/Hand/DealerHand.js","components/Hand/PlayerHand.js","components/Modal/Modal.js","components/ScoreBoard/ScoreBoard.js","components/Loader/Loader.js","service/deckOfCardsServiceAbstractor.js","util/cardMappings.js","util/updateState.js","container/Blackjack/Blackjack.js","util/localStorageManagement.js","container/TicTacToe/Square.js","container/TicTacToe/Board.js","util/minimax.js","container/TicTacToe/TicTacToe.js","App.js","index.js"],"names":["SideMenu","hideSideMenu","showSideMenu","className","onClick","to","SideBar","useState","setShowSideMenu","Home","Card","image","src","alt","CardsList","cards","map","card","index","style","key","code","length","DealerHand","isBusted","scores","winner","Math","max","PlayerHand","handleHitCallBack","handleStandCallBack","isStand","Modal","isOpen","childComponent","id","ScoreBoard","dealer","player","handleReshuffle","Loader","getNewCards","deckID","count","a","fetch","response","json","getNewDeck","reshuffleDeck","cardMappings","getScores","newScores","Set","getAllPossibleScores","score","cur","add","cardValue","value","Array","isArray","num","updateState","state","newCards","size","Game","isLoading","setIsLoading","setDeckID","setWinner","setPlayer","setDealer","defaultState","then","initializeCards","Promise","all","res","prevState","useEffect","deck_id_from_storage","window","localStorage","getItem","deck_id","arg","setItem","setLocalStorage","document","getElementsByClassName","filter","dealerScore","playerScore","getWinner","Square","onHandleClick","Board","handleSquareClickCallBack","squares","renderBoardRow","rowNum","checkWinner","lines","i","b","c","minimax","board","depth","isMaximizing","result","bestScore","Infinity","min","TicTacToe","fill","setSquares","isXturn","setXTurn","copySquares","slice","move","bestMove","onClearBoard","aria-label","App","basename","process","exact","path","component","Blackjack","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.58c202e6.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SideMenu = ({ hideSideMenu, showSideMenu }) => {\n    const getClassName = () => {\n        return showSideMenu ? 'sidemenu isShow' : 'sidemenu';\n    }\n    return (\n        <div className={getClassName()}>\n            <button className=\"close\" onClick={hideSideMenu}>×</button>\n            <Link to=\"/\" onClick={hideSideMenu}>Home</Link>\n            <Link to=\"/blackjack\" onClick={hideSideMenu}>Blackjack</Link>\n            <Link to=\"/tictactoe\" onClick={hideSideMenu}>TicTacToe</Link>\n        </div>\n    )\n}\n\nexport default SideMenu;\n","import React, { useState } from 'react';\nimport SideMenu from './SideMenu';\nimport '../../styles/SideBar/SideBar.scss';\n\nfunction SideBar() {\n    const [showSideMenu, setShowSideMenu] = useState(false);\n    const hideSideMenu = () => {\n        setShowSideMenu(false);\n    }\n    return (\n        <div className=\"sidebar\">\n            <button className=\"menu\" onClick={() => setShowSideMenu(true)}>☰</button>\n            <SideMenu showSideMenu={showSideMenu} hideSideMenu={hideSideMenu} />\n        </div>\n    )\n}\n\nexport default SideBar;\n","import React from 'react';\nimport '../..//styles/Home.scss';\n\nfunction Home() {\n    return <h1>Welcome to player the game</h1>\n}\n\nexport default Home;","import React from 'react';\nimport '../../styles/Cards/Card.scss';\n\nconst Card = ({ image }) => (\n    <img className=\"card\" src={image} alt=\"\"></img>\n)\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\nimport '../../styles/Cards/CardsList.scss';\n\nconst CardsList = ({ cards, className }) => {\n    return (\n        <Fragment>\n            {cards && <ul className={className ? 'cards-list dealer' : 'cards-list'}>{\n                cards.map((card, index) => (\n                    <li style={{ 'marginLeft': `${index * 15}px` }} className=\"list-item\" key={card.code}><Card {...card} /></li>\n                ))}\n                <li style={{ 'marginLeft': `${cards.length * 15}px` }} className=\"list-item\"><Card {...cards[0]} /></li>\n            </ul>}\n        </Fragment>)\n}\n\n\nexport default CardsList;","import React, { Fragment } from 'react';\nimport CardsList from '../Cards/CardsList';\n\nconst DealerHand = ({ cards, isBusted, scores, winner }) => (\n    <Fragment>\n        <div className=\"name\"><p className=\"dealer\">Dealer {isBusted && <span>Busted!</span>}{winner && !isBusted && <span>Score: {Math.max(...scores)}</span>}</p></div>\n        <CardsList className=\"Dealer\" cards={cards} />\n    </Fragment>\n)\n\nexport default DealerHand;","import React, { Fragment } from 'react';\nimport CardsList from '../Cards/CardsList';\n\nconst PlayerHand = ({ cards, handleHitCallBack, handleStandCallBack, isBusted, isStand, scores }) => (\n    <Fragment>\n        <CardsList cards={cards} />\n        {!isBusted && !isStand &&\n            <div className=\"player-control\">\n                <button onClick={handleHitCallBack}>Hit</button>\n                <button onClick={handleStandCallBack}>Stand</button>\n            </div>\n        }\n        <div className=\"name\">{isBusted && <p>Busted!</p>}{!isBusted && <p>Your Score: {Math.max(...scores)}</p>}</div>\n    </Fragment>\n)\n\nexport default PlayerHand;","import React from 'react';\nimport './Modal.scss';\n\nfunction Modal({ isOpen, childComponent }) {\n\n    function getClassName() {\n        return isOpen && 'isOpen';\n    }\n    return (\n        <div id=\"modal\" className={getClassName()}>\n            {isOpen && childComponent}\n        </div>\n    )\n}\n\nexport default Modal;","import React, { Fragment } from 'react';\n\nconst ScoreBoard = ({ dealer, player, winner, handleReshuffle }) => {\n\n    const renderDealerScore = () => {\n        return (\n            dealer.isBusted ? <div>Dealer Busted!</div> : <div>Dealer Score: {Math.max(...dealer.scores)}</div>\n        )\n    }\n\n    const renderPlayerScore = () => {\n        return (\n            player.isBusted ? <div>Player Busted!</div> : <div>Your Score: {Math.max(...player.scores)}</div>\n        )\n    }\n\n    const renderReshuffleButton = () => {\n        return (\n            <div>\n                <button className=\"reshuffle\" onClick={handleReshuffle}>Shuffle Deck</button>\n            </div>\n        )\n    }\n\n    const renderBoard = () => {\n        return (\n            <Fragment>\n                {<div style={{ 'textAlign': 'center', 'color': 'red' }}>{winner}</div>}\n                {renderDealerScore()}\n                {renderPlayerScore()}\n                {renderReshuffleButton()}\n            </Fragment>\n        )\n    }\n\n    const getClassName = () => {\n        return winner === '' ? 'score-board' : 'score-board slide-in';\n    }\n\n    return (\n        <div className=\"score-board-container\">\n            <div className={getClassName()}>\n                {winner && renderBoard()}\n            </div>\n        </div>\n    )\n\n}\n\nexport default ScoreBoard;","import React from 'react';\nimport '../../styles/Loader.scss';\n\nfunction Loader() {\n    return (\n        <div className=\"loader\"></div>\n    )\n}\n\nexport default Loader;","export const getNewCards = async (deckID, count) => {\n    const response = await fetch(`https://deckofcardsapi.com/api/deck/${deckID}/draw/?count=${count}`)\n    return await response.json();\n}\n\nexport const getNewDeck = async () => {\n    const response = await fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`);\n    return await response.json();\n}\n\nexport const reshuffleDeck = async deckID => {\n    const response = await fetch(`https://deckofcardsapi.com/api/deck/${deckID}/shuffle/`);\n    return await response.json();\n}","export const cardMappings = {\n    \"ACE\": [1, 11],\n    \"KING\": 10,\n    \"QUEEN\": 10,\n    \"JACK\": 10\n}","import {cardMappings} from './cardMappings';\n\nexport function getScores(cards) {\n    const newScores = new Set();\n    getAllPossibleScores(cards, 0, newScores, 0);\n    return newScores;\n}\n\nexport function updateState(state, newCards) {\n    const cards = [...state.cards, ...newCards];\n    const scores = getScores(cards);\n    const isBusted = scores.size === 0;\n    return { cards, isBusted, scores };\n}\n\nfunction getAllPossibleScores(cards, index, score, cur) {\n    if (cur > 21) {\n        return;\n    }\n    if (index === cards.length) {\n        score.add(cur);\n        return;\n    }\n    const card = cards[index];\n    const cardValue = cardMappings[card.value] || +card.value;\n    if (Array.isArray(cardValue)) {\n        for (let num of cardValue) {\n            getAllPossibleScores(cards, index + 1, score, cur + num);\n        }\n    } else {\n        getAllPossibleScores(cards, index + 1, score, cur + cardValue);\n    }\n}\n","import React, { Fragment, useState, useEffect } from 'react';\nimport DealerHand from '../../components/Hand/DealerHand';\nimport PlayerHand from '../../components/Hand/PlayerHand';\nimport Modal from '../../components/Modal/Modal';\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\nimport Loader from '../../components/Loader/Loader';\nimport { getLocalStorage, setLocalStorage } from '../../util/localStorageManagement';\nimport { getNewCards, getNewDeck, reshuffleDeck } from '../../service/deckOfCardsServiceAbstractor';\nimport { updateState } from '../../util/updateState';\nimport '../../styles/Blackjack.scss';\n\nfunction Game() {\n    const [isLoading, setIsLoading] = useState(true);\n    const [deckID, setDeckID] = useState('');\n    const [winner, setWinner] = useState('');\n    const [player, setPlayer] = useState({ cards: [], isBusted: false, scores: new Set() });\n    const [dealer, setDealer] = useState({ cards: [], isBusted: false, scores: new Set() });\n\n    useEffect(initializeDeck, [])\n    useEffect(initializeCards, [deckID])\n    useEffect(handleDealerStrategy, [dealer, player])\n\n    function getWinner() {\n        const dealerScore = Math.max(...dealer.scores);\n        const playerScore = Math.max(...player.scores);\n        if ((dealer.isBusted && player.isBusted) || (dealerScore === playerScore)) {\n            setWinner('Tied');\n        } else if (dealerScore > playerScore) {\n            setWinner('Dealer wins!');\n        } else {\n            setWinner('You win!');\n        }\n    }\n\n    function handleDealerStrategy() {\n        const { isBusted, isStand } = player;\n        if ((isBusted || isStand) && (Math.max(...dealer.scores) <= 16 && !dealer.isBusted)) {\n            getNewCards(deckID, 1)\n                .then(res => setDealer(prevState => updateState(prevState, res.cards)));\n        } else if (isBusted || isStand) {\n            document.getElementsByClassName('list-item')[0].style.filter = 'contrast(1)';\n            getWinner();\n        }\n    }\n\n    function initializeDeck() {\n        const deck_id_from_storage = getLocalStorage('deck_id');\n        if (deck_id_from_storage) {\n            reshuffleDeck(deck_id_from_storage)\n                .then(() => setDeckID(deck_id_from_storage));\n        } else {\n            getNewDeck().then(res => { setDeckID(res.deck_id); setLocalStorage({ key: 'deck_id', value: res.deck_id }) })\n        }\n        return () => reshuffleDeck(deck_id_from_storage);\n    }\n\n    function handlePlayerDrawCard() {\n        getNewCards(deckID, 1)\n            .then(res => setPlayer(prevState => updateState(prevState, res.cards)));\n    }\n\n    function handleSetPlayerStand() {\n        setPlayer(prevState => { return { ...prevState, isStand: true } });\n    }\n\n    function handleReshuffle() {\n        const defaultState = { cards: [], isBusted: false, scores: new Set() };\n        setIsLoading(true);\n        reshuffleDeck(deckID)\n            .then(() => {\n                setWinner('');\n                setPlayer(defaultState);\n                setDealer(defaultState);\n                initializeCards();\n            })\n    }\n\n    function initializeCards() {\n        if (!deckID) {\n            return;\n        }\n        Promise.all([getNewCards(deckID, 2), getNewCards(deckID, 2)])\n            .then(res => {\n                setDealer(prevState => updateState(prevState, res[0].cards));\n                setPlayer(prevState => updateState(prevState, res[1].cards));\n                setIsLoading(false);\n            })\n    }\n\n    function getScoreBoard() {\n        return (\n            <ScoreBoard dealer={dealer} player={player} winner={winner} handleReshuffle={handleReshuffle} />\n        )\n    }\n\n    return (\n        <Fragment>\n            <div className=\"blackjackgame\">\n                {\n                    isLoading ?\n                        <Loader /> :\n                        <Fragment>\n                            <Modal isOpen={winner} childComponent={getScoreBoard()} />\n                            <DealerHand {...dealer} winner={winner} />\n                            <PlayerHand {...player} handleHitCallBack={handlePlayerDrawCard} handleStandCallBack={handleSetPlayerStand} />\n                        </Fragment>\n                }\n            </div>\n        </Fragment >\n    )\n}\n\nexport default Game;","\n\nexport const setLocalStorage = function (arg) {\n    let { key, value } = arg;\n    window.localStorage.setItem(key, value);\n};\n\nexport const getLocalStorage = function (key) {\n    return window.localStorage.getItem(key);\n} \n","import React from 'react';\n\nfunction Square({ onHandleClick, value }) {\n    const getClassName = () => {\n        return value ? 'isOccupied' : '';\n    }\n    return (\n        <td className={getClassName()} onClick={onHandleClick}>{value}</td>\n    )\n}\n\nexport default Square;","import React, { Fragment } from 'react';\nimport Square from './Square';\n\nexport function Board({ handleSquareClickCallBack, squares }) {\n\n    const renderBoard = () => {\n        return (\n            <table>\n                <tbody>\n                    {renderBoardRow(0)}\n                    {renderBoardRow(1)}\n                    {renderBoardRow(2)}\n                </tbody>\n            </table>\n        )\n    }\n\n    const renderBoardRow = (rowNum) => {\n        return (\n            <tr>\n                <Square value={squares[rowNum * 3]} onHandleClick={() => handleSquareClickCallBack(rowNum * 3)} />\n                <Square value={squares[rowNum * 3 + 1]} onHandleClick={() => handleSquareClickCallBack(rowNum * 3 + 1)} />\n                <Square value={squares[rowNum * 3 + 2]} onHandleClick={() => handleSquareClickCallBack(rowNum * 3 + 2)} />\n            </tr>\n        )\n    }\n\n    return (\n        <Fragment>\n            {renderBoard()}\n        </Fragment>\n    )\n}\n\nexport default Board;","export const checkWinner = (squares) => {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    let count = 0;\n    for (let square of squares) {\n        if (square !== null) {\n            count++;\n        }\n    }\n    if (count === 9) {\n        return 't';\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nconst scores = {\n    '✕': -10,\n    '○': 10,\n    't': 0\n};\n\nexport function bestMove(board) {\n    let bestScore = -Infinity;\n    let move;\n    for (let i = 0; i < board.length; i++) {\n        if (board[i] !== null) {\n            continue;\n        }\n        board[i] = '○';\n        let score = minimax(board, 0, false);\n        board[i] = null;\n        if (score > bestScore) {\n            bestScore = score;\n            move = i;\n        }\n    }\n    return move;\n}\n\nfunction minimax(board, depth, isMaximizing) {\n    let result = checkWinner(board);\n    if (result !== null) {\n        return scores[result];\n    }\n\n    if (isMaximizing) {\n        let bestScore = -Infinity;\n        for (let i = 0; i < board.length; i++) {\n            // Is the spot available?\n            if (board[i] !== null) {\n                continue;\n            }\n            board[i] = '○';\n            let score = minimax(board, depth + 1, false);\n            board[i] = null;\n            bestScore = Math.max(score, bestScore);\n        }\n        return bestScore;\n    } else {\n        let bestScore = Infinity;\n        for (let i = 0; i < board.length; i++) {\n            // Is the spot available?\n            if (board[i] !== null) {\n                continue;\n            }\n            board[i] = '✕';\n            let score = minimax(board, depth + 1, true);\n            board[i] = null;\n            bestScore = Math.min(score, bestScore);\n        }\n        return bestScore;\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport { bestMove, checkWinner } from '../../util/minimax';\nimport '../../styles/TicTacToe/TicTacToe.scss';\n\nfunction TicTacToe() {\n    const [squares, setSquares] = useState(Array(9).fill(null));\n    const [isXturn, setXTurn] = useState(true);\n\n    useEffect(getComputerMove, [isXturn]);\n\n\n    function getComputerMove() {\n        if (isXturn || checkWinner(squares)) {\n            return;\n        }\n        const copySquares = squares.slice();\n        copySquares[bestMove(squares)] = '○';\n        setSquares(prevState => copySquares);\n        setXTurn(true);\n    }\n\n    const handleSquareClick = index => {\n        const winner = checkWinner(squares);\n        if (squares[index] || winner) {\n            return;\n        }\n        const copySquares = squares.slice();\n        copySquares[index] = '✕';\n        setSquares(prevState => copySquares);\n        setXTurn(false);\n    }\n\n    const renderResetButton = () => {\n        return (\n            <button aria-label=\"Reset Board\" onClick={onClearBoard}>Reset Board</button>\n        )\n    }\n\n    const onClearBoard = () => {\n        setXTurn(true);\n        setSquares(Array(9).fill(null));\n    }\n\n    return <div id=\"tictactoe\">\n        <Board squares={squares} handleSquareClickCallBack={handleSquareClick} />\n        {renderResetButton()}\n    </div>\n}\n\nexport default TicTacToe;","import React from 'react';\nimport SideBar from './components/SideBar/SideBar';\nimport Home from './container/Home/Home';\nimport Blackjack from './container/Blackjack/Blackjack';\nimport TicTacToe from './container/TicTacToe/TicTacToe';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './styles/App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <SideBar />\n      <div className=\"content-container\">\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/blackjack\" component={Blackjack} />\n        <Route exact path=\"/tictactoe\" component={TicTacToe} />\n      </div>\n    </BrowserRouter>\n  </div>\n)\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  //<React.StrictMode>\n  <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}